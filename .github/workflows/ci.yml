name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  MONGODB_VERSION: '6.0'

jobs:
  test-backend:
    runs-on: ubuntu-latest
    name: Backend Tests
    
    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
          MONGO_INITDB_DATABASE: test_db
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongosh
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Wait for MongoDB
      run: |
        until mongosh --host localhost:27017 --username testuser --password testpass --authenticationDatabase admin --eval "print('MongoDB is ready')" > /dev/null 2>&1; do
          echo "Waiting for MongoDB..."
          sleep 2
        done

    - name: Run backend linting
      working-directory: ./backend
      run: npm run lint

    - name: Run backend unit tests
      working-directory: ./backend
      run: npm run test:unit
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://testuser:testpass@localhost:27017/test_db?authSource=admin
        JWT_SECRET: test-jwt-secret-for-ci
        SESSION_SECRET: test-session-secret-for-ci

    - name: Run backend integration tests
      working-directory: ./backend
      run: npm run test:integration
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://testuser:testpass@localhost:27017/test_db?authSource=admin
        JWT_SECRET: test-jwt-secret-for-ci
        SESSION_SECRET: test-session-secret-for-ci

    - name: Run backend security tests
      working-directory: ./backend
      run: npm run test:security
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://testuser:testpass@localhost:27017/test_db?authSource=admin
        JWT_SECRET: test-jwt-secret-for-ci
        SESSION_SECRET: test-session-secret-for-ci

    - name: Run backend test coverage
      working-directory: ./backend
      run: npm run test:coverage
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://testuser:testpass@localhost:27017/test_db?authSource=admin
        JWT_SECRET: test-jwt-secret-for-ci
        SESSION_SECRET: test-session-secret-for-ci

    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  test-frontend:
    runs-on: ubuntu-latest
    name: Frontend Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint

    - name: Run frontend unit tests
      working-directory: ./frontend
      run: npm run test:unit

    - name: Run frontend integration tests
      working-directory: ./frontend
      run: npm run test:integration

    - name: Run frontend test coverage
      working-directory: ./frontend
      run: npm run test:coverage

    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

  e2e-tests:
    runs-on: ubuntu-latest
    name: End-to-End Tests
    needs: [test-backend, test-frontend]
    
    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
          MONGO_INITDB_DATABASE: test_db
        ports:
          - 27017:27017

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: Install Playwright browsers
      working-directory: ./frontend
      run: npx playwright install --with-deps

    - name: Start backend server
      working-directory: ./backend
      run: |
        npm start &
        sleep 10
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://testuser:testpass@localhost:27017/test_db?authSource=admin
        JWT_SECRET: test-jwt-secret-for-ci
        SESSION_SECRET: test-session-secret-for-ci
        PORT: 5000

    - name: Start frontend dev server
      working-directory: ./frontend
      run: |
        npm run dev &
        sleep 10
      env:
        VITE_API_URL: http://localhost:5000

    - name: Run E2E tests
      working-directory: ./frontend
      run: npm run test:e2e

    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: frontend/playwright-report/
        retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Run npm audit (backend)
      working-directory: ./backend
      run: npm audit --audit-level=moderate

    - name: Run npm audit (frontend)
      working-directory: ./frontend
      run: npm audit --audit-level=moderate

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --all-projects --severity-threshold=high

  build-and-deploy:
    runs-on: ubuntu-latest
    name: Build and Deploy
    needs: [test-backend, test-frontend, e2e-tests, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install and build frontend
      working-directory: ./frontend
      run: |
        npm ci
        npm run build

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add deployment commands here
        # For example, deploy to Vercel, AWS, etc.

    - name: Run smoke tests
      run: |
        echo "Running post-deployment smoke tests..."
        # Add smoke test commands here

    - name: Deploy to production
      if: success()
      run: |
        echo "Deploying to production environment..."
        # Add production deployment commands here

  notification:
    runs-on: ubuntu-latest
    name: Notify Results
    needs: [build-and-deploy]
    if: always()
    
    steps:
    - name: Notify Slack on success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "✅ CI/CD Pipeline completed successfully for ${{ github.ref }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify Slack on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "❌ CI/CD Pipeline failed for ${{ github.ref }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}